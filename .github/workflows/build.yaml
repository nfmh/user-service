name: Build Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'

jobs:
  sast_pipeline:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Set environment variables
      run: |
        echo "DATABASE_URL=sqlite:///:memory:" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=my-secret-key" >> $GITHUB_ENV
        echo "TEST_USER_PASSWORD=test123" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV  # Ensure PYTHONPATH is set correctly
        echo "ALLOWED_ORIGINS=http://localhost:3000" >> $GITHUB_ENV


    - name: Install Dependencies (Flask, SQLAlchemy, JWT, bcrypt, CORS, pytest, pytest-cov, Flask-WTF)
      run: |
        pip install Flask flask_sqlalchemy flask_jwt_extended bcrypt flask_cors flask_wtf bandit pytest pytest-cov

    # Step 1: Run Unit Tests with Coverage
    - name: Run Unit Tests with Coverage
      run: |
        pytest --cov=src/app --cov-report=xml:coverage-reports/coverage.xml --cov-report=html:coverage-reports/htmlcov
        # Post-process the coverage report to fix paths
        sed -i 's|/home/runner/work/user-service/user-service/||g' coverage-reports/coverage.xml  # Remove absolute paths

    # Step 2: Upload Coverage to SonarCloud
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
      with:
        args: >
          -Dsonar.projectKey=nfmh_user-service
          -Dsonar.organization=nfmh
          -Dsonar.sources=src/app  
          -Dsonar.tests=src/tests
          -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.xml
          -Dsonar.python.version=3.x
    
    # Docker build step
    - name: Build Docker image
      run: docker build -t user-service:vulnerable .

    # Trivy scan step
    - name: Run Trivy vulnerability scan
      id: trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: user-service:vulnerable
        format: 'table'
        severity: 'HIGH,CRITICAL'
        fail-on-severity: 'HIGH,CRITICAL'

    # Add a step to fail the build if Trivy finds vulnerabilities
    - name: Fail if vulnerabilities are found
      if: steps.trivy.outcome == 'failure'
      run: exit 1